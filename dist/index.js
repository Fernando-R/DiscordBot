// Generated by CoffeeScript 2.4.1
(function() {
  var ConfigFile, Discord, client, commands, handleCommand, loadCommands;

  Discord = require("discord.js");

  ConfigFile = require("./config");

  client = Discord.Client = new Discord.Client();

  commands = [];

  client.on("ready", function(x) {
    //let us know that the bot started
    return console.log('Ready to go');
  });

  client.on('guildMemberAdd', function(member) {
    var channel;
    channel = member.guild.channels.find(function(ch) {
      return ch.name === 'geral';
    });
    return channel.send(`Bem vindo ao servidor ${member}`);
  });

  client.on('message', (message) => {
    //ignore the message if it was send by a bot
    if (message.author.bot) {
      return;
    }
    //ignore messages that don't start with the prefix
    if (!message.content.startsWith(ConfigFile.config.prefix)) {
      return;
    }
    return handleCommand(message);
  });

  handleCommand = async function(msg) {
    var args, command, commandClass, error, i, len, results;
    //split the string into the command and all of the args
    command = msg.content.split(' ')[0].replace(ConfigFile.config.prefix, '');
    args = msg.content.split(' ').slice(1);
    results = [];
    for (i = 0, len = commands.length; i < len; i++) {
      commandClass = commands[i];
      try {
        if (!commandClass.isThisCommand(command)) {
          continue;
        }
        results.push((await commandClass.runCommand(args, msg, client)));
      } catch (error1) {
        error = error1;
        results.push(console.log(error));
      }
    }
    return results;
  };

  loadCommands = function(commandsPath) {
    var command, commandClass, commandClassConstructor, commandName, i, len, ref, results;
    // exit if there are no commands
    if (ConfigFile.config.commands.length === 0) {
      return;
    }
    ref = ConfigFile.config.commands;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      commandName = ref[i];
      commandClass = require(`${commandsPath}/${commandName}`);
      commandClassConstructor = commandClass[`${commandName}`];
      command = new commandClassConstructor();
      results.push(commands.push(command));
    }
    return results;
  };

  loadCommands("./commands");

  client.login(ConfigFile.config.token);

}).call(this);
